
WriteDriver.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ca0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000dd0  08000dd0  00010dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000df8  08000df8  00010e00  2**0
                  CONTENTS
  4 .ARM          00000000  08000df8  08000df8  00010e00  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000df8  08000e00  00010e00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000df8  08000df8  00010df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dfc  08000dfc  00010dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  08000e00  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000e00  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e00  2**0
                  CONTENTS, READONLY
 12 .debug_info   000041ff  00000000  00000000  00010e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000aac  00000000  00000000  00015028  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e08  00000000  00000000  00015ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000230  00000000  00000000  000168e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d8  00000000  00000000  00016b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001027  00000000  00000000  00016ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002249  00000000  00000000  00017d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a940  00000000  00000000  00019f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00024898  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000073c  00000000  00000000  00024914  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000db8 	.word	0x08000db8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000db8 	.word	0x08000db8

08000170 <delay>:
#else
#define LCD_DATASHIFT 0
#endif

static void delay(int a)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < a; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay+0x26>
	{
		for(int j = 0; j < 255; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	ddf9      	ble.n	8000184 <delay+0x14>
	for(int i = 0; i < a; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	dbef      	blt.n	800017e <delay+0xe>
	}
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_KICK>:

void LCD_KICK()
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	//LCDCR_PORT |= (1 << LCD_EN); // Set EN pin
	MCAL_GPIO_WritePin(LCDCR_PORT, LCD_EN, GPIO_PIN_SET);
 80001ac:	2201      	movs	r2, #1
 80001ae:	2101      	movs	r1, #1
 80001b0:	4806      	ldr	r0, [pc, #24]	; (80001cc <LCD_KICK+0x24>)
 80001b2:	f000 fcd8 	bl	8000b66 <MCAL_GPIO_WritePin>
	// _delay_us(1);
	delay(1);
 80001b6:	2001      	movs	r0, #1
 80001b8:	f7ff ffda 	bl	8000170 <delay>
	//LCDCR_PORT &= ~(1 << LCD_EN); // Reset EN pin
	MCAL_GPIO_WritePin(LCDCR_PORT, LCD_EN, GPIO_PIN_RESET);
 80001bc:	2200      	movs	r2, #0
 80001be:	2101      	movs	r1, #1
 80001c0:	4802      	ldr	r0, [pc, #8]	; (80001cc <LCD_KICK+0x24>)
 80001c2:	f000 fcd0 	bl	8000b66 <MCAL_GPIO_WritePin>


}
 80001c6:	bf00      	nop
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40010c00 	.word	0x40010c00

080001d0 <LCD_Clear_Screen>:

void LCD_Clear_Screen(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	LCD_Write_Comand(LCD_CLEAR_SCREEN);
 80001d4:	2001      	movs	r0, #1
 80001d6:	f000 f8a3 	bl	8000320 <LCD_Write_Comand>

}
 80001da:	bf00      	nop
 80001dc:	bd80      	pop	{r7, pc}
	...

080001e0 <LCD_Is_Busy>:
void LCD_Is_Busy(void)
{	
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0

	//LCD_DDR &= ~(0xFF << LCD_DATASHIFT);
	LCD_PORT->CRL = (uint32_t)(0x88888888 << LCD_DATASHIFT);
 80001e4:	4b0d      	ldr	r3, [pc, #52]	; (800021c <LCD_Is_Busy+0x3c>)
 80001e6:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80001ea:	601a      	str	r2, [r3, #0]



	//LCDCR_PORT |= (1 << LCD_RW); // RW pin is read
	MCAL_GPIO_WritePin(LCDCR_PORT, LCD_RW, GPIO_PIN_SET);
 80001ec:	2201      	movs	r2, #1
 80001ee:	2102      	movs	r1, #2
 80001f0:	480b      	ldr	r0, [pc, #44]	; (8000220 <LCD_Is_Busy+0x40>)
 80001f2:	f000 fcb8 	bl	8000b66 <MCAL_GPIO_WritePin>
	//LCDCR_PORT &= ~(1 << LCD_RS); // RS pin is write
	MCAL_GPIO_WritePin(LCDCR_PORT, LCD_RS, GPIO_PIN_RESET);
 80001f6:	2200      	movs	r2, #0
 80001f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <LCD_Is_Busy+0x40>)
 80001fe:	f000 fcb2 	bl	8000b66 <MCAL_GPIO_WritePin>

	LCD_KICK();
 8000202:	f7ff ffd1 	bl	80001a8 <LCD_KICK>

	//LCD_DDR = 0xFF;
	LCD_PORT->CRL = 0x88888888; // LCD D[0:7] as input
 8000206:	4b05      	ldr	r3, [pc, #20]	; (800021c <LCD_Is_Busy+0x3c>)
 8000208:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 800020c:	601a      	str	r2, [r3, #0]
	// LCDCR_PORT &= ~(1 << LCD_RW);
	MCAL_GPIO_WritePin(LCDCR_PORT, LCD_RW, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	2102      	movs	r1, #2
 8000212:	4803      	ldr	r0, [pc, #12]	; (8000220 <LCD_Is_Busy+0x40>)
 8000214:	f000 fca7 	bl	8000b66 <MCAL_GPIO_WritePin>

}
 8000218:	bf00      	nop
 800021a:	bd80      	pop	{r7, pc}
 800021c:	40010800 	.word	0x40010800
 8000220:	40010c00 	.word	0x40010c00

08000224 <LCD_GotoXY>:

void LCD_GotoXY(int line, int pos)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	6039      	str	r1, [r7, #0]

	if(line == 0)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d10d      	bne.n	8000250 <LCD_GotoXY+0x2c>
	{
		if(pos > 15 || pos < 0)
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	2b0f      	cmp	r3, #15
 8000238:	dc1b      	bgt.n	8000272 <LCD_GotoXY+0x4e>
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	db18      	blt.n	8000272 <LCD_GotoXY+0x4e>
			return;
		LCD_Write_Comand(LCD_BEGIN_AT_FIRST_RAW + pos);
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	b2db      	uxtb	r3, r3
 8000244:	3b80      	subs	r3, #128	; 0x80
 8000246:	b2db      	uxtb	r3, r3
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f869 	bl	8000320 <LCD_Write_Comand>
 800024e:	e013      	b.n	8000278 <LCD_GotoXY+0x54>
	}
	else if(line == 1)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2b01      	cmp	r3, #1
 8000254:	d110      	bne.n	8000278 <LCD_GotoXY+0x54>
	{
		if(pos > 15 || pos < 0)
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	2b0f      	cmp	r3, #15
 800025a:	dc0c      	bgt.n	8000276 <LCD_GotoXY+0x52>
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	db09      	blt.n	8000276 <LCD_GotoXY+0x52>
			return;
		LCD_Write_Comand(LCD_BEGIN_AT_SECOND_RAW + pos);
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	b2db      	uxtb	r3, r3
 8000266:	3b40      	subs	r3, #64	; 0x40
 8000268:	b2db      	uxtb	r3, r3
 800026a:	4618      	mov	r0, r3
 800026c:	f000 f858 	bl	8000320 <LCD_Write_Comand>
 8000270:	e002      	b.n	8000278 <LCD_GotoXY+0x54>
			return;
 8000272:	bf00      	nop
 8000274:	e000      	b.n	8000278 <LCD_GotoXY+0x54>
			return;
 8000276:	bf00      	nop
	}
}
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <LCD_Init>:

void LCD_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	//_delay_ms(20);
	delay(1);
 8000286:	2001      	movs	r0, #1
 8000288:	f7ff ff72 	bl	8000170 <delay>
	LCD_Is_Busy();
 800028c:	f7ff ffa8 	bl	80001e0 <LCD_Is_Busy>

	//LCDCR_DDR |= (1 << LCD_EN) | (1 << LCD_RW) | (1 << LCD_RS);
	GPIO_PinConfig_t PinConfig;
	PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000290:	2304      	movs	r3, #4
 8000292:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_PinNumber = LCD_EN;
 8000294:	2301      	movs	r3, #1
 8000296:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Speed = GPIO_SPEED_10M;
 8000298:	2301      	movs	r3, #1
 800029a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCDCR_PORT, &PinConfig);
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4619      	mov	r1, r3
 80002a0:	481d      	ldr	r0, [pc, #116]	; (8000318 <LCD_Init+0x98>)
 80002a2:	f000 fbea 	bl	8000a7a <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = LCD_RW;
 80002a6:	2302      	movs	r3, #2
 80002a8:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCDCR_PORT, &PinConfig);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4619      	mov	r1, r3
 80002ae:	481a      	ldr	r0, [pc, #104]	; (8000318 <LCD_Init+0x98>)
 80002b0:	f000 fbe3 	bl	8000a7a <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = LCD_RS;
 80002b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b8:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCDCR_PORT, &PinConfig);
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4619      	mov	r1, r3
 80002be:	4816      	ldr	r0, [pc, #88]	; (8000318 <LCD_Init+0x98>)
 80002c0:	f000 fbdb 	bl	8000a7a <MCAL_GPIO_Init>


	// LCDCR_PORT &= ~((1 << LCD_EN) | (1 << LCD_RW) | (1 << LCD_RS));
	MCAL_GPIO_WritePin(LCDCR_PORT, LCD_EN, GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2101      	movs	r1, #1
 80002c8:	4813      	ldr	r0, [pc, #76]	; (8000318 <LCD_Init+0x98>)
 80002ca:	f000 fc4c 	bl	8000b66 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCDCR_PORT, LCD_RW, GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2102      	movs	r1, #2
 80002d2:	4811      	ldr	r0, [pc, #68]	; (8000318 <LCD_Init+0x98>)
 80002d4:	f000 fc47 	bl	8000b66 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCDCR_PORT, LCD_RS, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002de:	480e      	ldr	r0, [pc, #56]	; (8000318 <LCD_Init+0x98>)
 80002e0:	f000 fc41 	bl	8000b66 <MCAL_GPIO_WritePin>
	// 	LCD_DDR = 0xFF;
	LCD_PORT->CRL = 0x88888888;
 80002e4:	4b0d      	ldr	r3, [pc, #52]	; (800031c <LCD_Init+0x9c>)
 80002e6:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80002ea:	601a      	str	r2, [r3, #0]
	LCD_Clear_Screen();
 80002ec:	f7ff ff70 	bl	80001d0 <LCD_Clear_Screen>

	//_delay_ms(15);
	delay(2);
 80002f0:	2002      	movs	r0, #2
 80002f2:	f7ff ff3d 	bl	8000170 <delay>

#ifdef LCD_8BIT_MODE
	LCD_Write_Comand(LCD_FUNCTION_8BIT_2LINES);
 80002f6:	2038      	movs	r0, #56	; 0x38
 80002f8:	f000 f812 	bl	8000320 <LCD_Write_Comand>
	LCD_Write_Comand(LCD_EN_4BIT);
	LCD_Write_Comand(LCD_FUNCTION_4BIT_2LINES);

#endif	

	LCD_Write_Comand(LCD_ENTRY_MODE);
 80002fc:	2006      	movs	r0, #6
 80002fe:	f000 f80f 	bl	8000320 <LCD_Write_Comand>
	LCD_Write_Comand(LCD_BEGIN_AT_FIRST_RAW);
 8000302:	2080      	movs	r0, #128	; 0x80
 8000304:	f000 f80c 	bl	8000320 <LCD_Write_Comand>
	LCD_Write_Comand(LCD_DISP_ON_CURSOR_BLINK);
 8000308:	200f      	movs	r0, #15
 800030a:	f000 f809 	bl	8000320 <LCD_Write_Comand>

}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40010c00 	.word	0x40010c00
 800031c:	40010800 	.word	0x40010800

08000320 <LCD_Write_Comand>:



void LCD_Write_Comand(unsigned char command)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	71fb      	strb	r3, [r7, #7]
	LCD_Is_Busy();
 800032a:	f7ff ff59 	bl	80001e0 <LCD_Is_Busy>

#ifdef LCD_8BIT_MODE
	//LCD_PORT = command;
	MCAL_GPIO_WritePort(LCD_PORT, command);
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	b29b      	uxth	r3, r3
 8000332:	4619      	mov	r1, r3
 8000334:	4809      	ldr	r0, [pc, #36]	; (800035c <LCD_Write_Comand+0x3c>)
 8000336:	f000 fc34 	bl	8000ba2 <MCAL_GPIO_WritePort>

	//	LCDCR_PORT &= ~((1 << LCD_RW) | (1 << LCD_RS));
	MCAL_GPIO_WritePin(LCDCR_PORT, LCD_RW, GPIO_PIN_RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	2102      	movs	r1, #2
 800033e:	4808      	ldr	r0, [pc, #32]	; (8000360 <LCD_Write_Comand+0x40>)
 8000340:	f000 fc11 	bl	8000b66 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCDCR_PORT, LCD_RS, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <LCD_Write_Comand+0x40>)
 800034c:	f000 fc0b 	bl	8000b66 <MCAL_GPIO_WritePin>
	LCD_KICK();
 8000350:	f7ff ff2a 	bl	80001a8 <LCD_KICK>
	//_delay_ms(2);
	delay(2);


#endif
}
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	40010800 	.word	0x40010800
 8000360:	40010c00 	.word	0x40010c00

08000364 <LCD_Write_Char>:



void LCD_Write_Char(unsigned char data)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]


#ifdef LCD_8BIT_MODE
	LCD_Is_Busy();	
 800036e:	f7ff ff37 	bl	80001e0 <LCD_Is_Busy>
	//LCD_PORT = data;
	MCAL_GPIO_WritePort(LCD_PORT, data);
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	b29b      	uxth	r3, r3
 8000376:	4619      	mov	r1, r3
 8000378:	4809      	ldr	r0, [pc, #36]	; (80003a0 <LCD_Write_Char+0x3c>)
 800037a:	f000 fc12 	bl	8000ba2 <MCAL_GPIO_WritePort>
	//LCDCR_PORT &= ~(1 << LCD_RW);
	MCAL_GPIO_WritePin(LCDCR_PORT, LCD_RW, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2102      	movs	r1, #2
 8000382:	4808      	ldr	r0, [pc, #32]	; (80003a4 <LCD_Write_Char+0x40>)
 8000384:	f000 fbef 	bl	8000b66 <MCAL_GPIO_WritePin>
	//LCDCR_PORT |= (1 << LCD_RS);
	MCAL_GPIO_WritePin(LCDCR_PORT, LCD_RS, GPIO_PIN_SET);
 8000388:	2201      	movs	r2, #1
 800038a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800038e:	4805      	ldr	r0, [pc, #20]	; (80003a4 <LCD_Write_Char+0x40>)
 8000390:	f000 fbe9 	bl	8000b66 <MCAL_GPIO_WritePin>

	LCD_KICK();
 8000394:	f7ff ff08 	bl	80001a8 <LCD_KICK>
	//_delay_us(100);
	delay(1);


#endif
}
 8000398:	bf00      	nop
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40010800 	.word	0x40010800
 80003a4:	40010c00 	.word	0x40010c00

080003a8 <LCD_Write_String>:

}


void LCD_Write_String(char* data)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	int count = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
	while(*data != 0)
 80003b4:	e01d      	b.n	80003f2 <LCD_Write_String+0x4a>
	{
		if(count == 16)
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	2b10      	cmp	r3, #16
 80003ba:	d104      	bne.n	80003c6 <LCD_Write_String+0x1e>
		{
			LCD_GotoXY(1, 0);
 80003bc:	2100      	movs	r1, #0
 80003be:	2001      	movs	r0, #1
 80003c0:	f7ff ff30 	bl	8000224 <LCD_GotoXY>
 80003c4:	e00a      	b.n	80003dc <LCD_Write_String+0x34>
		}
		else if (count == 32)
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	2b20      	cmp	r3, #32
 80003ca:	d107      	bne.n	80003dc <LCD_Write_String+0x34>
		{
			LCD_Clear_Screen();
 80003cc:	f7ff ff00 	bl	80001d0 <LCD_Clear_Screen>
			count = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
			LCD_GotoXY(0, 0);
 80003d4:	2100      	movs	r1, #0
 80003d6:	2000      	movs	r0, #0
 80003d8:	f7ff ff24 	bl	8000224 <LCD_GotoXY>
		}

		LCD_Write_Char(*data);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ffbf 	bl	8000364 <LCD_Write_Char>
		count++;
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	3301      	adds	r3, #1
 80003ea:	60fb      	str	r3, [r7, #12]
		data++;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	3301      	adds	r3, #1
 80003f0:	607b      	str	r3, [r7, #4]
	while(*data != 0)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d1dd      	bne.n	80003b6 <LCD_Write_String+0xe>


	}
}
 80003fa:	bf00      	nop
 80003fc:	3710      	adds	r7, #16
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <Update_EXTI>:

static void Enable_NVIC (uint16_t IRQ);
static void Disable_NVIC (uint16_t IRQ);

static void Update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	/*
	 * 1) Configure GPIO To Be Alternative Function Input (Floating Input)
	 */
	GPIO_PinConfig_t PinConfig;
	/* Update the GPIO Pin to be floating input */
	PinConfig.GPIO_PinNumber = EXTI_Config->EXTI_Pin.GPIO_Pin;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	891b      	ldrh	r3, [r3, #8]
 8000410:	813b      	strh	r3, [r7, #8]
	PinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000412:	2301      	movs	r3, #1
 8000414:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_Pin.GPIO_Port, &PinConfig);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	f107 0208 	add.w	r2, r7, #8
 800041e:	4611      	mov	r1, r2
 8000420:	4618      	mov	r0, r3
 8000422:	f000 fb2a 	bl	8000a7a <MCAL_GPIO_Init>

	/*
	 * 2) Update AFIO to Route between EXTI Line With Port A,B,C,D
	 */
	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_Pin.EXTI_InputLine / 4;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	881b      	ldrh	r3, [r3, #0]
 800042a:	089b      	lsrs	r3, r3, #2
 800042c:	b29b      	uxth	r3, r3
 800042e:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_position = (EXTI_Config->EXTI_Pin.EXTI_InputLine % 4) *4;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	881b      	ldrh	r3, [r3, #0]
 8000434:	b2db      	uxtb	r3, r3
 8000436:	f003 0303 	and.w	r3, r3, #3
 800043a:	b2db      	uxtb	r3, r3
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	73bb      	strb	r3, [r7, #14]

	/* Clear the four bits first */
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_position);
 8000440:	4a61      	ldr	r2, [pc, #388]	; (80005c8 <Update_EXTI+0x1c4>)
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	3302      	adds	r3, #2
 8000446:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800044a:	7bbb      	ldrb	r3, [r7, #14]
 800044c:	210f      	movs	r1, #15
 800044e:	fa01 f303 	lsl.w	r3, r1, r3
 8000452:	43db      	mvns	r3, r3
 8000454:	4618      	mov	r0, r3
 8000456:	495c      	ldr	r1, [pc, #368]	; (80005c8 <Update_EXTI+0x1c4>)
 8000458:	7bfb      	ldrb	r3, [r7, #15]
 800045a:	4002      	ands	r2, r0
 800045c:	3302      	adds	r3, #2
 800045e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	/* Set the four bits for the port */
	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_Pin.GPIO_Port) & 0xF) << AFIO_EXTICR_position);
 8000462:	4a59      	ldr	r2, [pc, #356]	; (80005c8 <Update_EXTI+0x1c4>)
 8000464:	7bfb      	ldrb	r3, [r7, #15]
 8000466:	3302      	adds	r3, #2
 8000468:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	4956      	ldr	r1, [pc, #344]	; (80005cc <Update_EXTI+0x1c8>)
 8000472:	428b      	cmp	r3, r1
 8000474:	d016      	beq.n	80004a4 <Update_EXTI+0xa0>
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	4955      	ldr	r1, [pc, #340]	; (80005d0 <Update_EXTI+0x1cc>)
 800047c:	428b      	cmp	r3, r1
 800047e:	d00f      	beq.n	80004a0 <Update_EXTI+0x9c>
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	4953      	ldr	r1, [pc, #332]	; (80005d4 <Update_EXTI+0x1d0>)
 8000486:	428b      	cmp	r3, r1
 8000488:	d008      	beq.n	800049c <Update_EXTI+0x98>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	4952      	ldr	r1, [pc, #328]	; (80005d8 <Update_EXTI+0x1d4>)
 8000490:	428b      	cmp	r3, r1
 8000492:	d101      	bne.n	8000498 <Update_EXTI+0x94>
 8000494:	2303      	movs	r3, #3
 8000496:	e006      	b.n	80004a6 <Update_EXTI+0xa2>
 8000498:	2300      	movs	r3, #0
 800049a:	e004      	b.n	80004a6 <Update_EXTI+0xa2>
 800049c:	2302      	movs	r3, #2
 800049e:	e002      	b.n	80004a6 <Update_EXTI+0xa2>
 80004a0:	2301      	movs	r3, #1
 80004a2:	e000      	b.n	80004a6 <Update_EXTI+0xa2>
 80004a4:	2300      	movs	r3, #0
 80004a6:	7bb9      	ldrb	r1, [r7, #14]
 80004a8:	408b      	lsls	r3, r1
 80004aa:	4618      	mov	r0, r3
 80004ac:	4946      	ldr	r1, [pc, #280]	; (80005c8 <Update_EXTI+0x1c4>)
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	4302      	orrs	r2, r0
 80004b2:	3302      	adds	r3, #2
 80004b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*
	 * 3) Update Rising / Falling Edge Register
	 */

	/* Reset bits of rising */
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_InputLine);
 80004b8:	4b48      	ldr	r3, [pc, #288]	; (80005dc <Update_EXTI+0x1d8>)
 80004ba:	689b      	ldr	r3, [r3, #8]
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	8812      	ldrh	r2, [r2, #0]
 80004c0:	4611      	mov	r1, r2
 80004c2:	2201      	movs	r2, #1
 80004c4:	408a      	lsls	r2, r1
 80004c6:	43d2      	mvns	r2, r2
 80004c8:	4611      	mov	r1, r2
 80004ca:	4a44      	ldr	r2, [pc, #272]	; (80005dc <Update_EXTI+0x1d8>)
 80004cc:	400b      	ands	r3, r1
 80004ce:	6093      	str	r3, [r2, #8]

	/* Reset bits of falling */
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_InputLine);
 80004d0:	4b42      	ldr	r3, [pc, #264]	; (80005dc <Update_EXTI+0x1d8>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	8812      	ldrh	r2, [r2, #0]
 80004d8:	4611      	mov	r1, r2
 80004da:	2201      	movs	r2, #1
 80004dc:	408a      	lsls	r2, r1
 80004de:	43d2      	mvns	r2, r2
 80004e0:	4611      	mov	r1, r2
 80004e2:	4a3e      	ldr	r2, [pc, #248]	; (80005dc <Update_EXTI+0x1d8>)
 80004e4:	400b      	ands	r3, r1
 80004e6:	60d3      	str	r3, [r2, #12]

	/* Which mode ?!*/
	if(EXTI_Config->Trigger_Case == EXTI_RT)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	7b1b      	ldrb	r3, [r3, #12]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d10b      	bne.n	8000508 <Update_EXTI+0x104>
	{
		/* Set bits of rising */
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLine);
 80004f0:	4b3a      	ldr	r3, [pc, #232]	; (80005dc <Update_EXTI+0x1d8>)
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	8812      	ldrh	r2, [r2, #0]
 80004f8:	4611      	mov	r1, r2
 80004fa:	2201      	movs	r2, #1
 80004fc:	408a      	lsls	r2, r1
 80004fe:	4611      	mov	r1, r2
 8000500:	4a36      	ldr	r2, [pc, #216]	; (80005dc <Update_EXTI+0x1d8>)
 8000502:	430b      	orrs	r3, r1
 8000504:	6093      	str	r3, [r2, #8]
 8000506:	e029      	b.n	800055c <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_FT)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	7b1b      	ldrb	r3, [r3, #12]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d10b      	bne.n	8000528 <Update_EXTI+0x124>
	{
		/* Set bits of falling */
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLine);
 8000510:	4b32      	ldr	r3, [pc, #200]	; (80005dc <Update_EXTI+0x1d8>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	8812      	ldrh	r2, [r2, #0]
 8000518:	4611      	mov	r1, r2
 800051a:	2201      	movs	r2, #1
 800051c:	408a      	lsls	r2, r1
 800051e:	4611      	mov	r1, r2
 8000520:	4a2e      	ldr	r2, [pc, #184]	; (80005dc <Update_EXTI+0x1d8>)
 8000522:	430b      	orrs	r3, r1
 8000524:	60d3      	str	r3, [r2, #12]
 8000526:	e019      	b.n	800055c <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_RFT)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	7b1b      	ldrb	r3, [r3, #12]
 800052c:	2b02      	cmp	r3, #2
 800052e:	d115      	bne.n	800055c <Update_EXTI+0x158>
	{
		/* Set bits of rising & falling */
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLine);
 8000530:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <Update_EXTI+0x1d8>)
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	8812      	ldrh	r2, [r2, #0]
 8000538:	4611      	mov	r1, r2
 800053a:	2201      	movs	r2, #1
 800053c:	408a      	lsls	r2, r1
 800053e:	4611      	mov	r1, r2
 8000540:	4a26      	ldr	r2, [pc, #152]	; (80005dc <Update_EXTI+0x1d8>)
 8000542:	430b      	orrs	r3, r1
 8000544:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLine);
 8000546:	4b25      	ldr	r3, [pc, #148]	; (80005dc <Update_EXTI+0x1d8>)
 8000548:	68db      	ldr	r3, [r3, #12]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	8812      	ldrh	r2, [r2, #0]
 800054e:	4611      	mov	r1, r2
 8000550:	2201      	movs	r2, #1
 8000552:	408a      	lsls	r2, r1
 8000554:	4611      	mov	r1, r2
 8000556:	4a21      	ldr	r2, [pc, #132]	; (80005dc <Update_EXTI+0x1d8>)
 8000558:	430b      	orrs	r3, r1
 800055a:	60d3      	str	r3, [r2, #12]

	/*
	 * 4) Update Interrupt Handling CallBack
	 */

	GP_IRQ_CallBack[EXTI_Config->EXTI_Pin.EXTI_InputLine] = EXTI_Config->P_IRQ_CallBack;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	4619      	mov	r1, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	691b      	ldr	r3, [r3, #16]
 8000566:	4a1e      	ldr	r2, [pc, #120]	; (80005e0 <Update_EXTI+0x1dc>)
 8000568:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	/*
	 * 5) Enable/Disable IRQ EXTI & NVIC
	 */

	if(EXTI_Config->IRQ_Enable == EXTI_IRQ_Enable)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	7b5b      	ldrb	r3, [r3, #13]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d110      	bne.n	8000596 <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLine);
 8000574:	4b19      	ldr	r3, [pc, #100]	; (80005dc <Update_EXTI+0x1d8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	8812      	ldrh	r2, [r2, #0]
 800057c:	4611      	mov	r1, r2
 800057e:	2201      	movs	r2, #1
 8000580:	408a      	lsls	r2, r1
 8000582:	4611      	mov	r1, r2
 8000584:	4a15      	ldr	r2, [pc, #84]	; (80005dc <Update_EXTI+0x1d8>)
 8000586:	430b      	orrs	r3, r1
 8000588:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_Pin.EXTI_InputLine);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	4618      	mov	r0, r3
 8000590:	f000 f944 	bl	800081c <Enable_NVIC>
	{
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_InputLine);
		Disable_NVIC(EXTI_Config->EXTI_Pin.EXTI_InputLine);
	}

}
 8000594:	e014      	b.n	80005c0 <Update_EXTI+0x1bc>
	else if(EXTI_Config->IRQ_Enable == EXTI_IRQ_Disable)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	7b5b      	ldrb	r3, [r3, #13]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d110      	bne.n	80005c0 <Update_EXTI+0x1bc>
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_InputLine);
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <Update_EXTI+0x1d8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	8812      	ldrh	r2, [r2, #0]
 80005a6:	4611      	mov	r1, r2
 80005a8:	2201      	movs	r2, #1
 80005aa:	408a      	lsls	r2, r1
 80005ac:	43d2      	mvns	r2, r2
 80005ae:	4611      	mov	r1, r2
 80005b0:	4a0a      	ldr	r2, [pc, #40]	; (80005dc <Update_EXTI+0x1d8>)
 80005b2:	400b      	ands	r3, r1
 80005b4:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_Pin.EXTI_InputLine);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f994 	bl	80008e8 <Disable_NVIC>
}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40010000 	.word	0x40010000
 80005cc:	40010800 	.word	0x40010800
 80005d0:	40010c00 	.word	0x40010c00
 80005d4:	40011000 	.word	0x40011000
 80005d8:	40011400 	.word	0x40011400
 80005dc:	40010400 	.word	0x40010400
 80005e0:	20000028 	.word	0x20000028

080005e4 <MCAL_EXTI_GPIO_Init>:
 * @param [in] 		- EXTI_Config: set by @ref EXTI_define, EXTI_Trigger_define and EXTI_IRQ_define
 * @retval 			- None
 * Note				- None
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t * EXTI_Config)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff ff09 	bl	8000404 <Update_EXTI>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <EXTI0_IRQHandler>:
/* ================================================ */


// EXTI0
void EXTI0_IRQHandler (void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 0;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <EXTI0_IRQHandler+0x1c>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a04      	ldr	r2, [pc, #16]	; (8000618 <EXTI0_IRQHandler+0x1c>)
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[0]();
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <EXTI0_IRQHandler+0x20>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4798      	blx	r3

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40010400 	.word	0x40010400
 800061c:	20000028 	.word	0x20000028

08000620 <EXTI1_IRQHandler>:

// EXTI1
void EXTI1_IRQHandler (void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 1;
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <EXTI1_IRQHandler+0x1c>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <EXTI1_IRQHandler+0x1c>)
 800062a:	f043 0302 	orr.w	r3, r3, #2
 800062e:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[1]();
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <EXTI1_IRQHandler+0x20>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	4798      	blx	r3

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40010400 	.word	0x40010400
 8000640:	20000028 	.word	0x20000028

08000644 <EXTI2_IRQHandler>:

// EXTI2
void EXTI2_IRQHandler (void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 2;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <EXTI2_IRQHandler+0x1c>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <EXTI2_IRQHandler+0x1c>)
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[2]();
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <EXTI2_IRQHandler+0x20>)
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	4798      	blx	r3

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40010400 	.word	0x40010400
 8000664:	20000028 	.word	0x20000028

08000668 <EXTI3_IRQHandler>:

// EXTI3
void EXTI3_IRQHandler (void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 3;
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <EXTI3_IRQHandler+0x1c>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <EXTI3_IRQHandler+0x1c>)
 8000672:	f043 0308 	orr.w	r3, r3, #8
 8000676:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[3]();
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <EXTI3_IRQHandler+0x20>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	4798      	blx	r3

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40010400 	.word	0x40010400
 8000688:	20000028 	.word	0x20000028

0800068c <EXTI4_IRQHandler>:

// EXTI4
void EXTI4_IRQHandler (void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 4;
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <EXTI4_IRQHandler+0x1c>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <EXTI4_IRQHandler+0x1c>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[4]();
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <EXTI4_IRQHandler+0x20>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4798      	blx	r3

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40010400 	.word	0x40010400
 80006ac:	20000028 	.word	0x20000028

080006b0 <EXTI9_5_IRQHandler>:

// EXTI5 ---> EXTI9
void EXTI9_5_IRQHandler (void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5)	{EXTI->PR |= (1<<5); GP_IRQ_CallBack[5]();}
 80006b4:	4b26      	ldr	r3, [pc, #152]	; (8000750 <EXTI9_5_IRQHandler+0xa0>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	f003 0320 	and.w	r3, r3, #32
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d008      	beq.n	80006d2 <EXTI9_5_IRQHandler+0x22>
 80006c0:	4b23      	ldr	r3, [pc, #140]	; (8000750 <EXTI9_5_IRQHandler+0xa0>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	4a22      	ldr	r2, [pc, #136]	; (8000750 <EXTI9_5_IRQHandler+0xa0>)
 80006c6:	f043 0320 	orr.w	r3, r3, #32
 80006ca:	6153      	str	r3, [r2, #20]
 80006cc:	4b21      	ldr	r3, [pc, #132]	; (8000754 <EXTI9_5_IRQHandler+0xa4>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	4798      	blx	r3
	if (EXTI->PR & 1<<6)	{EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();}
 80006d2:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <EXTI9_5_IRQHandler+0xa0>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d008      	beq.n	80006f0 <EXTI9_5_IRQHandler+0x40>
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <EXTI9_5_IRQHandler+0xa0>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <EXTI9_5_IRQHandler+0xa0>)
 80006e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e8:	6153      	str	r3, [r2, #20]
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <EXTI9_5_IRQHandler+0xa4>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4798      	blx	r3
	if (EXTI->PR & 1<<7)	{EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();}
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <EXTI9_5_IRQHandler+0xa0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d008      	beq.n	800070e <EXTI9_5_IRQHandler+0x5e>
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <EXTI9_5_IRQHandler+0xa0>)
 80006fe:	695b      	ldr	r3, [r3, #20]
 8000700:	4a13      	ldr	r2, [pc, #76]	; (8000750 <EXTI9_5_IRQHandler+0xa0>)
 8000702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000706:	6153      	str	r3, [r2, #20]
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <EXTI9_5_IRQHandler+0xa4>)
 800070a:	69db      	ldr	r3, [r3, #28]
 800070c:	4798      	blx	r3
	if (EXTI->PR & 1<<8)	{EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();}
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <EXTI9_5_IRQHandler+0xa0>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000716:	2b00      	cmp	r3, #0
 8000718:	d008      	beq.n	800072c <EXTI9_5_IRQHandler+0x7c>
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <EXTI9_5_IRQHandler+0xa0>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a0c      	ldr	r2, [pc, #48]	; (8000750 <EXTI9_5_IRQHandler+0xa0>)
 8000720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <EXTI9_5_IRQHandler+0xa4>)
 8000728:	6a1b      	ldr	r3, [r3, #32]
 800072a:	4798      	blx	r3
	if (EXTI->PR & 1<<9)	{EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();}
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <EXTI9_5_IRQHandler+0xa0>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000734:	2b00      	cmp	r3, #0
 8000736:	d008      	beq.n	800074a <EXTI9_5_IRQHandler+0x9a>
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <EXTI9_5_IRQHandler+0xa0>)
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <EXTI9_5_IRQHandler+0xa0>)
 800073e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000742:	6153      	str	r3, [r2, #20]
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <EXTI9_5_IRQHandler+0xa4>)
 8000746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000748:	4798      	blx	r3
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40010400 	.word	0x40010400
 8000754:	20000028 	.word	0x20000028

08000758 <EXTI15_10_IRQHandler>:

// EXTI10 ---> EXTI15
void EXTI15_10_IRQHandler (void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10)	{EXTI->PR |= (1<<10); GP_IRQ_CallBack[10]();}
 800075c:	4b2d      	ldr	r3, [pc, #180]	; (8000814 <EXTI15_10_IRQHandler+0xbc>)
 800075e:	695b      	ldr	r3, [r3, #20]
 8000760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000764:	2b00      	cmp	r3, #0
 8000766:	d008      	beq.n	800077a <EXTI15_10_IRQHandler+0x22>
 8000768:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <EXTI15_10_IRQHandler+0xbc>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	4a29      	ldr	r2, [pc, #164]	; (8000814 <EXTI15_10_IRQHandler+0xbc>)
 800076e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000772:	6153      	str	r3, [r2, #20]
 8000774:	4b28      	ldr	r3, [pc, #160]	; (8000818 <EXTI15_10_IRQHandler+0xc0>)
 8000776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000778:	4798      	blx	r3
	if (EXTI->PR & 1<<11)	{EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();}
 800077a:	4b26      	ldr	r3, [pc, #152]	; (8000814 <EXTI15_10_IRQHandler+0xbc>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000782:	2b00      	cmp	r3, #0
 8000784:	d008      	beq.n	8000798 <EXTI15_10_IRQHandler+0x40>
 8000786:	4b23      	ldr	r3, [pc, #140]	; (8000814 <EXTI15_10_IRQHandler+0xbc>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a22      	ldr	r2, [pc, #136]	; (8000814 <EXTI15_10_IRQHandler+0xbc>)
 800078c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000790:	6153      	str	r3, [r2, #20]
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <EXTI15_10_IRQHandler+0xc0>)
 8000794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000796:	4798      	blx	r3
	if (EXTI->PR & 1<<12)	{EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();}
 8000798:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <EXTI15_10_IRQHandler+0xbc>)
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d008      	beq.n	80007b6 <EXTI15_10_IRQHandler+0x5e>
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <EXTI15_10_IRQHandler+0xbc>)
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	4a1a      	ldr	r2, [pc, #104]	; (8000814 <EXTI15_10_IRQHandler+0xbc>)
 80007aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007ae:	6153      	str	r3, [r2, #20]
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <EXTI15_10_IRQHandler+0xc0>)
 80007b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b4:	4798      	blx	r3
	if (EXTI->PR & 1<<13)	{EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();}
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <EXTI15_10_IRQHandler+0xbc>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d008      	beq.n	80007d4 <EXTI15_10_IRQHandler+0x7c>
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <EXTI15_10_IRQHandler+0xbc>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	4a13      	ldr	r2, [pc, #76]	; (8000814 <EXTI15_10_IRQHandler+0xbc>)
 80007c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007cc:	6153      	str	r3, [r2, #20]
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <EXTI15_10_IRQHandler+0xc0>)
 80007d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d2:	4798      	blx	r3
	if (EXTI->PR & 1<<14)	{EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();}
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <EXTI15_10_IRQHandler+0xbc>)
 80007d6:	695b      	ldr	r3, [r3, #20]
 80007d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d008      	beq.n	80007f2 <EXTI15_10_IRQHandler+0x9a>
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <EXTI15_10_IRQHandler+0xbc>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <EXTI15_10_IRQHandler+0xbc>)
 80007e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ea:	6153      	str	r3, [r2, #20]
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <EXTI15_10_IRQHandler+0xc0>)
 80007ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007f0:	4798      	blx	r3
	if (EXTI->PR & 1<<15)	{EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();}
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <EXTI15_10_IRQHandler+0xbc>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d008      	beq.n	8000810 <EXTI15_10_IRQHandler+0xb8>
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <EXTI15_10_IRQHandler+0xbc>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a04      	ldr	r2, [pc, #16]	; (8000814 <EXTI15_10_IRQHandler+0xbc>)
 8000804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000808:	6153      	str	r3, [r2, #20]
 800080a:	4b03      	ldr	r3, [pc, #12]	; (8000818 <EXTI15_10_IRQHandler+0xc0>)
 800080c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800080e:	4798      	blx	r3
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40010400 	.word	0x40010400
 8000818:	20000028 	.word	0x20000028

0800081c <Enable_NVIC>:

static void Enable_NVIC (uint16_t IRQ)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d854      	bhi.n	80008d6 <Enable_NVIC+0xba>
 800082c:	a201      	add	r2, pc, #4	; (adr r2, 8000834 <Enable_NVIC+0x18>)
 800082e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000832:	bf00      	nop
 8000834:	08000875 	.word	0x08000875
 8000838:	08000883 	.word	0x08000883
 800083c:	08000891 	.word	0x08000891
 8000840:	0800089f 	.word	0x0800089f
 8000844:	080008ad 	.word	0x080008ad
 8000848:	080008bb 	.word	0x080008bb
 800084c:	080008bb 	.word	0x080008bb
 8000850:	080008bb 	.word	0x080008bb
 8000854:	080008bb 	.word	0x080008bb
 8000858:	080008bb 	.word	0x080008bb
 800085c:	080008c9 	.word	0x080008c9
 8000860:	080008c9 	.word	0x080008c9
 8000864:	080008c9 	.word	0x080008c9
 8000868:	080008c9 	.word	0x080008c9
 800086c:	080008c9 	.word	0x080008c9
 8000870:	080008c9 	.word	0x080008c9
	{
		case 0: NVIC_IRQ6_EXTI0_EN(); break;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <Enable_NVIC+0xc4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a19      	ldr	r2, [pc, #100]	; (80008e0 <Enable_NVIC+0xc4>)
 800087a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	e029      	b.n	80008d6 <Enable_NVIC+0xba>
		case 1: NVIC_IRQ7_EXTI1_EN(); break;
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <Enable_NVIC+0xc4>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <Enable_NVIC+0xc4>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6013      	str	r3, [r2, #0]
 800088e:	e022      	b.n	80008d6 <Enable_NVIC+0xba>
		case 2: NVIC_IRQ8_EXTI2_EN(); break;
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <Enable_NVIC+0xc4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <Enable_NVIC+0xc4>)
 8000896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	e01b      	b.n	80008d6 <Enable_NVIC+0xba>
		case 3:	NVIC_IRQ9_EXTI3_EN(); break;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <Enable_NVIC+0xc4>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <Enable_NVIC+0xc4>)
 80008a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008a8:	6013      	str	r3, [r2, #0]
 80008aa:	e014      	b.n	80008d6 <Enable_NVIC+0xba>
		case 4: NVIC_IRQ10_EXTI4_EN(); break;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <Enable_NVIC+0xc4>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <Enable_NVIC+0xc4>)
 80008b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	e00d      	b.n	80008d6 <Enable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9: NVIC_IRQ23_EXTI5_9_EN(); break;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <Enable_NVIC+0xc4>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <Enable_NVIC+0xc4>)
 80008c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008c4:	6013      	str	r3, [r2, #0]
 80008c6:	e006      	b.n	80008d6 <Enable_NVIC+0xba>
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15: NVIC_IRQ40_EXTI10_15_EN(); break;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <Enable_NVIC+0xc8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <Enable_NVIC+0xc8>)
 80008ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	bf00      	nop
	}
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	e000e100 	.word	0xe000e100
 80008e4:	e000e104 	.word	0xe000e104

080008e8 <Disable_NVIC>:

static void Disable_NVIC (uint16_t IRQ)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80008f2:	88fb      	ldrh	r3, [r7, #6]
 80008f4:	2b0f      	cmp	r3, #15
 80008f6:	d854      	bhi.n	80009a2 <Disable_NVIC+0xba>
 80008f8:	a201      	add	r2, pc, #4	; (adr r2, 8000900 <Disable_NVIC+0x18>)
 80008fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fe:	bf00      	nop
 8000900:	08000941 	.word	0x08000941
 8000904:	0800094f 	.word	0x0800094f
 8000908:	0800095d 	.word	0x0800095d
 800090c:	0800096b 	.word	0x0800096b
 8000910:	08000979 	.word	0x08000979
 8000914:	08000987 	.word	0x08000987
 8000918:	08000987 	.word	0x08000987
 800091c:	08000987 	.word	0x08000987
 8000920:	08000987 	.word	0x08000987
 8000924:	08000987 	.word	0x08000987
 8000928:	08000995 	.word	0x08000995
 800092c:	08000995 	.word	0x08000995
 8000930:	08000995 	.word	0x08000995
 8000934:	08000995 	.word	0x08000995
 8000938:	08000995 	.word	0x08000995
 800093c:	08000995 	.word	0x08000995
	{
		case 0: NVIC_IRQ6_EXTI0_DI(); break;
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <Disable_NVIC+0xc4>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a19      	ldr	r2, [pc, #100]	; (80009ac <Disable_NVIC+0xc4>)
 8000946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	e029      	b.n	80009a2 <Disable_NVIC+0xba>
		case 1: NVIC_IRQ7_EXTI1_DI(); break;
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <Disable_NVIC+0xc4>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a16      	ldr	r2, [pc, #88]	; (80009ac <Disable_NVIC+0xc4>)
 8000954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000958:	6013      	str	r3, [r2, #0]
 800095a:	e022      	b.n	80009a2 <Disable_NVIC+0xba>
		case 2: NVIC_IRQ8_EXTI2_DI(); break;
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <Disable_NVIC+0xc4>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a12      	ldr	r2, [pc, #72]	; (80009ac <Disable_NVIC+0xc4>)
 8000962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	e01b      	b.n	80009a2 <Disable_NVIC+0xba>
		case 3:	NVIC_IRQ9_EXTI3_DI(); break;
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <Disable_NVIC+0xc4>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <Disable_NVIC+0xc4>)
 8000970:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000974:	6013      	str	r3, [r2, #0]
 8000976:	e014      	b.n	80009a2 <Disable_NVIC+0xba>
		case 4: NVIC_IRQ10_EXTI4_DI(); break;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <Disable_NVIC+0xc4>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <Disable_NVIC+0xc4>)
 800097e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000982:	6013      	str	r3, [r2, #0]
 8000984:	e00d      	b.n	80009a2 <Disable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9: NVIC_IRQ23_EXTI5_9_DI(); break;
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <Disable_NVIC+0xc4>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <Disable_NVIC+0xc4>)
 800098c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000990:	6013      	str	r3, [r2, #0]
 8000992:	e006      	b.n	80009a2 <Disable_NVIC+0xba>
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15: NVIC_IRQ40_EXTI10_15_DI(); break;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <Disable_NVIC+0xc8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <Disable_NVIC+0xc8>)
 800099a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	bf00      	nop
	}
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	e000e180 	.word	0xe000e180
 80009b0:	e000e184 	.word	0xe000e184

080009b4 <Get_CRLH_POS>:

#include <Stm32_F103C6_GPIO.h>


uint8_t Get_CRLH_POS(uint16_t GPIO_PIN_x)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_PIN_x)
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	2b80      	cmp	r3, #128	; 0x80
 80009c2:	d042      	beq.n	8000a4a <Get_CRLH_POS+0x96>
 80009c4:	2b80      	cmp	r3, #128	; 0x80
 80009c6:	dc11      	bgt.n	80009ec <Get_CRLH_POS+0x38>
 80009c8:	2b08      	cmp	r3, #8
 80009ca:	d036      	beq.n	8000a3a <Get_CRLH_POS+0x86>
 80009cc:	2b08      	cmp	r3, #8
 80009ce:	dc06      	bgt.n	80009de <Get_CRLH_POS+0x2a>
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d02e      	beq.n	8000a32 <Get_CRLH_POS+0x7e>
 80009d4:	2b04      	cmp	r3, #4
 80009d6:	d02e      	beq.n	8000a36 <Get_CRLH_POS+0x82>
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d028      	beq.n	8000a2e <Get_CRLH_POS+0x7a>
 80009dc:	e047      	b.n	8000a6e <Get_CRLH_POS+0xba>
 80009de:	2b20      	cmp	r3, #32
 80009e0:	d02f      	beq.n	8000a42 <Get_CRLH_POS+0x8e>
 80009e2:	2b40      	cmp	r3, #64	; 0x40
 80009e4:	d02f      	beq.n	8000a46 <Get_CRLH_POS+0x92>
 80009e6:	2b10      	cmp	r3, #16
 80009e8:	d029      	beq.n	8000a3e <Get_CRLH_POS+0x8a>
 80009ea:	e040      	b.n	8000a6e <Get_CRLH_POS+0xba>
 80009ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009f0:	d033      	beq.n	8000a5a <Get_CRLH_POS+0xa6>
 80009f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009f6:	dc09      	bgt.n	8000a0c <Get_CRLH_POS+0x58>
 80009f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009fc:	d029      	beq.n	8000a52 <Get_CRLH_POS+0x9e>
 80009fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a02:	d028      	beq.n	8000a56 <Get_CRLH_POS+0xa2>
 8000a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a08:	d021      	beq.n	8000a4e <Get_CRLH_POS+0x9a>
 8000a0a:	e030      	b.n	8000a6e <Get_CRLH_POS+0xba>
 8000a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a10:	d027      	beq.n	8000a62 <Get_CRLH_POS+0xae>
 8000a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a16:	dc03      	bgt.n	8000a20 <Get_CRLH_POS+0x6c>
 8000a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a1c:	d01f      	beq.n	8000a5e <Get_CRLH_POS+0xaa>
 8000a1e:	e026      	b.n	8000a6e <Get_CRLH_POS+0xba>
 8000a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a24:	d01f      	beq.n	8000a66 <Get_CRLH_POS+0xb2>
 8000a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a2a:	d01e      	beq.n	8000a6a <Get_CRLH_POS+0xb6>
 8000a2c:	e01f      	b.n	8000a6e <Get_CRLH_POS+0xba>
		{
		case GPIO_PIN_0 :
			return 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e01e      	b.n	8000a70 <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_1 :
			return 4;
 8000a32:	2304      	movs	r3, #4
 8000a34:	e01c      	b.n	8000a70 <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_2 :
			return 8;
 8000a36:	2308      	movs	r3, #8
 8000a38:	e01a      	b.n	8000a70 <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_3 :
			return 12;
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	e018      	b.n	8000a70 <Get_CRLH_POS+0xbc>
			break;
		case GPIO_PIN_4 :
			return 16;
 8000a3e:	2310      	movs	r3, #16
 8000a40:	e016      	b.n	8000a70 <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_5 :
			return 20;
 8000a42:	2314      	movs	r3, #20
 8000a44:	e014      	b.n	8000a70 <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_6 :
			return 24;
 8000a46:	2318      	movs	r3, #24
 8000a48:	e012      	b.n	8000a70 <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_7 :
			return 28;
 8000a4a:	231c      	movs	r3, #28
 8000a4c:	e010      	b.n	8000a70 <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_8 :
			return 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e00e      	b.n	8000a70 <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_9 :
			return 4;
 8000a52:	2304      	movs	r3, #4
 8000a54:	e00c      	b.n	8000a70 <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_10 :
			return 8;
 8000a56:	2308      	movs	r3, #8
 8000a58:	e00a      	b.n	8000a70 <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_11 :
			return 12;
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	e008      	b.n	8000a70 <Get_CRLH_POS+0xbc>
			break;
		case GPIO_PIN_12 :
			return 16;
 8000a5e:	2310      	movs	r3, #16
 8000a60:	e006      	b.n	8000a70 <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_13 :
			return 20;
 8000a62:	2314      	movs	r3, #20
 8000a64:	e004      	b.n	8000a70 <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_14 :
			return 24;
 8000a66:	2318      	movs	r3, #24
 8000a68:	e002      	b.n	8000a70 <Get_CRLH_POS+0xbc>
			break;

		case GPIO_PIN_15 :
			return 28;
 8000a6a:	231c      	movs	r3, #28
 8000a6c:	e000      	b.n	8000a70 <Get_CRLH_POS+0xbc>
			break;
		}
		return 0;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <MCAL_GPIO_Init>:
 * @retval		- None
 * Note			- STM32F103C6 has five ports (A:E) but LQFP48 includes (PORTA, PORTB) fully
 * 				  and (PORTC, PORTD) partially.
 */
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b086      	sub	sp, #24
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) (x=A..G) Configures Pins [0:7]
	// Port configuration register high (GPIOx_CRH) (x=A..G) Configures Pins [8:15]
	volatile uint32_t *configRegister = NULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
	configRegister = (PinConfig->GPIO_PinNumber <= GPIO_PIN_7) ? &GPIOx->CRL : &GPIOx->CRH;
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	2b80      	cmp	r3, #128	; 0x80
 8000a8e:	d801      	bhi.n	8000a94 <MCAL_GPIO_Init+0x1a>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	e001      	b.n	8000a98 <MCAL_GPIO_Init+0x1e>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3304      	adds	r3, #4
 8000a98:	613b      	str	r3, [r7, #16]

	// Clear CNFx[1:0] MODEx[1:0]
	uint8_t pinPos = Get_CRLH_POS(PinConfig->GPIO_PinNumber);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ff88 	bl	80009b4 <Get_CRLH_POS>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	73fb      	strb	r3, [r7, #15]
	(*configRegister) &= ~(0b1111 << pinPos);
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	7bfa      	ldrb	r2, [r7, #15]
 8000aae:	210f      	movs	r1, #15
 8000ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab4:	43d2      	mvns	r2, r2
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	601a      	str	r2, [r3, #0]

	uint8_t pinConf = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	75fb      	strb	r3, [r7, #23]
	if((PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD) ||  (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD))
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	789b      	ldrb	r3, [r3, #2]
 8000ac4:	2b07      	cmp	r3, #7
 8000ac6:	d00b      	beq.n	8000ae0 <MCAL_GPIO_Init+0x66>
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	789b      	ldrb	r3, [r3, #2]
 8000acc:	2b07      	cmp	r3, #7
 8000ace:	d007      	beq.n	8000ae0 <MCAL_GPIO_Init+0x66>
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	789b      	ldrb	r3, [r3, #2]
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d003      	beq.n	8000ae0 <MCAL_GPIO_Init+0x66>
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	789b      	ldrb	r3, [r3, #2]
 8000adc:	2b05      	cmp	r3, #5
 8000ade:	d10b      	bne.n	8000af8 <MCAL_GPIO_Init+0x7e>
	{
		pinConf = ((PinConfig->GPIO_Mode - 4) << 2) | PinConfig->GPIO_Speed;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	789b      	ldrb	r3, [r3, #2]
 8000ae4:	3b04      	subs	r3, #4
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	b25a      	sxtb	r2, r3
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	78db      	ldrb	r3, [r3, #3]
 8000aee:	b25b      	sxtb	r3, r3
 8000af0:	4313      	orrs	r3, r2
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	75fb      	strb	r3, [r7, #23]
 8000af6:	e029      	b.n	8000b4c <MCAL_GPIO_Init+0xd2>
	}
	else
	{
		if((PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_Mode == GPIO_MODE_ANALOG))
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	789b      	ldrb	r3, [r3, #2]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d003      	beq.n	8000b08 <MCAL_GPIO_Init+0x8e>
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	789b      	ldrb	r3, [r3, #2]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d104      	bne.n	8000b12 <MCAL_GPIO_Init+0x98>
		{
			pinConf = PinConfig->GPIO_Mode << 2;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	789b      	ldrb	r3, [r3, #2]
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	75fb      	strb	r3, [r7, #23]
 8000b10:	e01c      	b.n	8000b4c <MCAL_GPIO_Init+0xd2>
		}
		else if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_AF)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	789b      	ldrb	r3, [r3, #2]
 8000b16:	2b08      	cmp	r3, #8
 8000b18:	d102      	bne.n	8000b20 <MCAL_GPIO_Init+0xa6>
		{
			pinConf = GPIO_MODE_INPUT_FLO << 2;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	75fb      	strb	r3, [r7, #23]
 8000b1e:	e015      	b.n	8000b4c <MCAL_GPIO_Init+0xd2>
		}
		else
		{
			pinConf = GPIO_MODE_INPUT_PU << 2;
 8000b20:	2308      	movs	r3, #8
 8000b22:	75fb      	strb	r3, [r7, #23]
			if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	789b      	ldrb	r3, [r3, #2]
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d107      	bne.n	8000b3c <MCAL_GPIO_Init+0xc2>
			{
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	683a      	ldr	r2, [r7, #0]
 8000b32:	8812      	ldrh	r2, [r2, #0]
 8000b34:	431a      	orrs	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	e007      	b.n	8000b4c <MCAL_GPIO_Init+0xd2>
			}
			else
			{
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	8812      	ldrh	r2, [r2, #0]
 8000b44:	43d2      	mvns	r2, r2
 8000b46:	401a      	ands	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	60da      	str	r2, [r3, #12]
			}

		}
	}

	(*configRegister) |= (pinConf << pinPos);
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	7df9      	ldrb	r1, [r7, #23]
 8000b52:	7bfa      	ldrb	r2, [r7, #15]
 8000b54:	fa01 f202 	lsl.w	r2, r1, r2
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	601a      	str	r2, [r3, #0]


}
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <MCAL_GPIO_WritePin>:
 * @param[in] 	- value: the value that will be written on the pin
 * @retval		- None
 * Note			- None
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_PIN_x, uint8_t value)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	807b      	strh	r3, [r7, #2]
 8000b72:	4613      	mov	r3, r2
 8000b74:	707b      	strb	r3, [r7, #1]
	if(value == GPIO_PIN_SET)
 8000b76:	787b      	ldrb	r3, [r7, #1]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d106      	bne.n	8000b8a <MCAL_GPIO_WritePin+0x24>
	{
		GPIOx->ODR |= GPIO_PIN_x;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	68da      	ldr	r2, [r3, #12]
 8000b80:	887b      	ldrh	r3, [r7, #2]
 8000b82:	431a      	orrs	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	60da      	str	r2, [r3, #12]
	else
	{
		GPIOx->ODR &= ~GPIO_PIN_x;
	}

}
 8000b88:	e006      	b.n	8000b98 <MCAL_GPIO_WritePin+0x32>
		GPIOx->ODR &= ~GPIO_PIN_x;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	887a      	ldrh	r2, [r7, #2]
 8000b90:	43d2      	mvns	r2, r2
 8000b92:	401a      	ands	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	60da      	str	r2, [r3, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <MCAL_GPIO_WritePort>:
 * @param[in] 	- value: value to be written on portx
 * @retval		- None
 * Note			- None
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef* GPIOx, uint16_t Value)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	460b      	mov	r3, r1
 8000bac:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 8000bae:	887a      	ldrh	r2, [r7, #2]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	60da      	str	r2, [r3, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
	...

08000bc0 <USART1_IRQHandler>:
		}
	}
}

void USART1_IRQHandler (void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 8000bc4:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <USART1_IRQHandler+0x10>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	691b      	ldr	r3, [r3, #16]
 8000bca:	4798      	blx	r3
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2000001c 	.word	0x2000001c

08000bd4 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 8000bd8:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <USART2_IRQHandler+0x10>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	691b      	ldr	r3, [r3, #16]
 8000bde:	4798      	blx	r3
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000001c 	.word	0x2000001c

08000be8 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 8000bec:	4b02      	ldr	r3, [pc, #8]	; (8000bf8 <USART3_IRQHandler+0x10>)
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	4798      	blx	r3
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000001c 	.word	0x2000001c

08000bfc <HardFault_Handler>:
#include "Stm32_F103C6_EXTI.h"
#include "Stm32_F103C6_GPIO.h"

// Implement cpu exception functions, so the cpu can halt in them
void HardFault_Handler()
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
	//main();
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <BusFault_Handler>:

void BusFault_Handler()
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <UsageFault_Handler>:

void UsageFault_Handler()
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <clock_init>:



void clock_init()
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
	// Using internal 8 MHz RC oscillator
	RCC_GPIOA_CLK_EN();
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <clock_init+0x24>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <clock_init+0x24>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <clock_init+0x24>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a03      	ldr	r2, [pc, #12]	; (8000c44 <clock_init+0x24>)
 8000c36:	f043 0308 	orr.w	r3, r3, #8
 8000c3a:	6193      	str	r3, [r2, #24]

}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	40021000 	.word	0x40021000

08000c48 <delay>:



void delay(int a)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < a; i++)
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	e00b      	b.n	8000c6e <delay+0x26>
	{
		for(int j = 0; j < 255; j++);
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	e002      	b.n	8000c62 <delay+0x1a>
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	2bfe      	cmp	r3, #254	; 0xfe
 8000c66:	ddf9      	ble.n	8000c5c <delay+0x14>
	for(int i = 0; i < a; i++)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	dbef      	blt.n	8000c56 <delay+0xe>
	}
}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <CPU_SwitchAccess>:
{
	PRIVILAGED,
	UNPRIVILAGED
};
void CPU_SwitchAccess(enum CPUAccessLevel level)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
	switch(level)
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d002      	beq.n	8000c96 <CPU_SwitchAccess+0x16>
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d009      	beq.n	8000ca8 <CPU_SwitchAccess+0x28>
			"orr r3, r3, #0x1 \n\t"
			"msr CONTROL, r3 \n\t"
		);
		break;
	}
}
 8000c94:	e00f      	b.n	8000cb6 <CPU_SwitchAccess+0x36>
		__asm(
 8000c96:	f3ef 8314 	mrs	r3, CONTROL
 8000c9a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8000c9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca2:	f383 8814 	msr	CONTROL, r3
		break;
 8000ca6:	e006      	b.n	8000cb6 <CPU_SwitchAccess+0x36>
		__asm(
 8000ca8:	f3ef 8314 	mrs	r3, CONTROL
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	f383 8814 	msr	CONTROL, r3
		break;
 8000cb4:	bf00      	nop
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <interrupt_callback>:


void interrupt_callback()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	LCD_Write_String("IRQ, EXTI9 happened --__");
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <interrupt_callback+0x10>)
 8000cc6:	f7ff fb6f 	bl	80003a8 <LCD_Write_String>
				[out1] "=r" (IPSR)
				:   //Input parameters

	);
*/
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	08000dd0 	.word	0x08000dd0

08000cd4 <main>:
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0

	clock_init();
 8000cda:	f7ff ffa1 	bl	8000c20 <clock_init>
	LCD_Init();
 8000cde:	f7ff facf 	bl	8000280 <LCD_Init>

	CPU_SwitchAccess(UNPRIVILAGED);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f7ff ffcc 	bl	8000c80 <CPU_SwitchAccess>

	EXTI_PinConfig_t  EXTI_Config;
	EXTI_Config.EXTI_Pin = EXTI9PB9;
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <main+0x40>)
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_Config.IRQ_Enable = EXTI_IRQ_Enable;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	747b      	strb	r3, [r7, #17]
	EXTI_Config.Trigger_Case = EXTI_FT;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	743b      	strb	r3, [r7, #16]
	EXTI_Config.P_IRQ_CallBack = interrupt_callback;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <main+0x44>)
 8000cfc:	617b      	str	r3, [r7, #20]

	MCAL_EXTI_GPIO_Init(&EXTI_Config);
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fc6f 	bl	80005e4 <MCAL_EXTI_GPIO_Init>

	//CPU_SwitchAccess(UNPRIVILAGED);
	//CPU_SwitchAccess(PRIVILAGED);


	delay(50);
 8000d06:	2032      	movs	r0, #50	; 0x32
 8000d08:	f7ff ff9e 	bl	8000c48 <delay>
	//LCD_Write_String("Hello, worldHappy to see you today, thank youlol");
	while(1)
	{

		delay(1);
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f7ff ff9b 	bl	8000c48 <delay>
 8000d12:	e7fb      	b.n	8000d0c <main+0x38>
 8000d14:	08000dec 	.word	0x08000dec
 8000d18:	08000cc1 	.word	0x08000cc1

08000d1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d1c:	480d      	ldr	r0, [pc, #52]	; (8000d54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d20:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d24:	480c      	ldr	r0, [pc, #48]	; (8000d58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d26:	490d      	ldr	r1, [pc, #52]	; (8000d5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d28:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <LoopForever+0xe>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d3c:	4c0a      	ldr	r4, [pc, #40]	; (8000d68 <LoopForever+0x16>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d4a:	f000 f811 	bl	8000d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d4e:	f7ff ffc1 	bl	8000cd4 <main>

08000d52 <LoopForever>:

LoopForever:
    b LoopForever
 8000d52:	e7fe      	b.n	8000d52 <LoopForever>
  ldr   r0, =_estack
 8000d54:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d60:	08000e00 	.word	0x08000e00
  ldr r2, =_sbss
 8000d64:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d68:	20000064 	.word	0x20000064

08000d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC1_2_IRQHandler>
	...

08000d70 <__libc_init_array>:
 8000d70:	b570      	push	{r4, r5, r6, lr}
 8000d72:	2500      	movs	r5, #0
 8000d74:	4e0c      	ldr	r6, [pc, #48]	; (8000da8 <__libc_init_array+0x38>)
 8000d76:	4c0d      	ldr	r4, [pc, #52]	; (8000dac <__libc_init_array+0x3c>)
 8000d78:	1ba4      	subs	r4, r4, r6
 8000d7a:	10a4      	asrs	r4, r4, #2
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	d109      	bne.n	8000d94 <__libc_init_array+0x24>
 8000d80:	f000 f81a 	bl	8000db8 <_init>
 8000d84:	2500      	movs	r5, #0
 8000d86:	4e0a      	ldr	r6, [pc, #40]	; (8000db0 <__libc_init_array+0x40>)
 8000d88:	4c0a      	ldr	r4, [pc, #40]	; (8000db4 <__libc_init_array+0x44>)
 8000d8a:	1ba4      	subs	r4, r4, r6
 8000d8c:	10a4      	asrs	r4, r4, #2
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	d105      	bne.n	8000d9e <__libc_init_array+0x2e>
 8000d92:	bd70      	pop	{r4, r5, r6, pc}
 8000d94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d98:	4798      	blx	r3
 8000d9a:	3501      	adds	r5, #1
 8000d9c:	e7ee      	b.n	8000d7c <__libc_init_array+0xc>
 8000d9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000da2:	4798      	blx	r3
 8000da4:	3501      	adds	r5, #1
 8000da6:	e7f2      	b.n	8000d8e <__libc_init_array+0x1e>
 8000da8:	08000df8 	.word	0x08000df8
 8000dac:	08000df8 	.word	0x08000df8
 8000db0:	08000df8 	.word	0x08000df8
 8000db4:	08000dfc 	.word	0x08000dfc

08000db8 <_init>:
 8000db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dba:	bf00      	nop
 8000dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dbe:	bc08      	pop	{r3}
 8000dc0:	469e      	mov	lr, r3
 8000dc2:	4770      	bx	lr

08000dc4 <_fini>:
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc6:	bf00      	nop
 8000dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dca:	bc08      	pop	{r3}
 8000dcc:	469e      	mov	lr, r3
 8000dce:	4770      	bx	lr
